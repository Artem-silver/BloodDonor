//
//  CalendarViewController.m
//  BloodDonor
//
//  Created by Andrey Rebrik on 13.07.12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//

#import "CalendarViewController.h"
#import "EventPlanningViewController.h"
#import "EventViewController.h"
#import "Common.h"
#import <Parse/Parse.h>

@interface CalendarViewController ()

- (void)showSlider;
- (void)hideSlider;

- (void)loadCalendar;
- (NSDate *)previousMonthDate;
- (NSDate *)nextMonthDate;

@end

@implementation CalendarViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self)
    {
        sTabBarController = [[STabBarController alloc] init];
        sTabBarController.viewController = self;
        selectedDate = [[NSDate date] retain];
    }
    return self;
}

#pragma mark Buttons click
- (IBAction)previousMonthButtonClick:(id)sender
{
    NSDate *oldDate = selectedDate;
    selectedDate = [[self previousMonthDate] retain];
    [oldDate release];
    [self loadCalendar];
}

- (IBAction)nextMonthButtonClick:(id)sender
{
    NSDate *oldDate = selectedDate;
    selectedDate = [[self nextMonthDate] retain];
    [oldDate release];
    [self loadCalendar];
}

- (IBAction)dayClick:(id)sender
{
    EventPlanningViewController *eventPlanningViewController = [[[EventPlanningViewController alloc] initWithNibName:@"EventPlanningViewController" bundle:nil] autorelease];
    [self.navigationController pushViewController:eventPlanningViewController animated:NO];
}

#pragma mark TableView
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return 3;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return 9;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    UITableViewCell *tableViewCell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:nil] autorelease];
    
    /*NSMutableDictionary *categoryDescription = [cellList objectAtIndex:indexPath.row];
    
    tableViewCell.textLabel.text = [categoryDescription objectForKey:@"name"];
    tableViewCell.textLabel.textColor = [UIColor colorWithRed:31.0f/255.0f green:56.0f/255.0f blue:139.0f/255.0f alpha:1.0f];
    tableViewCell.textLabel.font = [UIFont fontWithName:@"DINCondensedCTT" size:20];*/
    
    if (indexPath.row == 0 && indexPath.section != 0)
    {
        UIImageView *shadow = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"calendarSliderSectionShadowBottom"]];
        [tableViewCell addSubview:shadow];
    }
    
    return tableViewCell;
}

- (void)tableView:(UITableView *)theTableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    /*ProductListViewController *productListViewController = [[[ProductListViewController alloc] initWithNibName:@"ProductListViewController" bundle:nil catalogInfo:[cellList objectAtIndex:indexPath.row]] autorelease];
    [self.navigationController pushViewController:productListViewController animated:NO];
    [tableView deselectRowAtIndexPath:indexPath animated:YES];*/
}

- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section
{
    UIView *sectionView = [[[UIView alloc] initWithFrame:CGRectMake(0, 0, 307, 32)] autorelease];
    
    if (section > 0)
    {
        UIImageView *background = [[[UIImageView alloc] initWithImage:[UIImage imageNamed:@"calendarSliderSectionBackground"]] autorelease];
        UILabel *sectionText = [[[UILabel alloc] initWithFrame:CGRectMake(121, 9, 186, 14)] autorelease];
        sectionText.text = @"Можно сдать";
        sectionText.backgroundColor = [UIColor clearColor];
        sectionText.textColor = [UIColor colorWithRed:223.0f/255.0f green:141.0f/255.0f blue:75.0f/255.0f alpha:1.0f];
        sectionText.font = [UIFont fontWithName:@"Helvetica-Bold" size:15];
        
        [sectionView addSubview:background];
        [sectionView addSubview:sectionText];
    }
    
    return sectionView;
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    if (section > 0)
        return 32;
    else
        return 0;
}

#pragma mark TapRecognizer
- (IBAction)singleTapSlider:(UITapGestureRecognizer *)gestureRecognizer
{
    if (sliderView.frame.origin.y == 48)
        [self hideSlider];
    else
        [self showSlider];
}

- (IBAction)panGestureMoveAround:(UIPanGestureRecognizer *)gesture
{
    CGPoint translation = [gesture translationInView:self.view];
    CGPoint newSliderOrigin = CGPointMake(sliderView.frame.origin.x, sliderView.frame.origin.y + translation.y);
    
    if ([gesture state] == UIGestureRecognizerStateBegan || [gesture state] == UIGestureRecognizerStateChanged)
    {
        if (newSliderOrigin.y >= 48 && newSliderOrigin.y <= 375)
        {
            sliderView.frame = CGRectMake(newSliderOrigin.x, newSliderOrigin.y, sliderView.frame.size.width, sliderView.frame.size.height);
            [gesture setTranslation:CGPointZero inView:self.view];
        }
    }
    else if ([gesture state] == UIGestureRecognizerStateEnded)
    {
        if (newSliderOrigin.y >= 48 && newSliderOrigin.y <= 211)
            [self showSlider];
        else if (newSliderOrigin.y <= 375 && newSliderOrigin.y >= 211)
            [self hideSlider];
    }
}

- (void)showSlider
{
    float animationDuration = 0.0009f * (sliderView.frame.origin.y - 48);
    [UIView beginAnimations:nil context:nil];
    [UIView setAnimationDuration:animationDuration];
    [UIView setAnimationBeginsFromCurrentState:YES];
    
    sliderView.frame = CGRectMake(sliderView.frame.origin.x, 48, sliderView.frame.size.width, sliderView.frame.size.height);
    
    [UIView commitAnimations];
}

- (void)hideSlider
{
    float animationDuration = 0.0009f * (375 - sliderView.frame.origin.y);
    [UIView beginAnimations:nil context:nil];
    [UIView setAnimationDuration:animationDuration];
    [UIView setAnimationBeginsFromCurrentState:YES];
    
    sliderView.frame = CGRectMake(sliderView.frame.origin.x, 375, sliderView.frame.size.width, sliderView.frame.size.height);
    
    [UIView commitAnimations];
}

#pragma mark Lifecycle
- (void)viewDidLoad
{
    [super viewDidLoad];
    
    sTabBarController = [[STabBarController alloc] init];
    sTabBarController.viewController = self;
    [sTabBarController addSubview];
    
    [self loadCalendar];
}

- (void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
    
    [sTabBarController addSubview];
}

- (void)viewDidDisappear:(BOOL)animated
{
    [sTabBarController removeSubviews];
    
    [super viewDidDisappear:animated];
}

- (void)dealloc
{
    [sTabBarController release];
    [selectedDate release];
    [super dealloc];
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}

- (void)loadCalendar
{
    NSCalendar *currentCalendar = [NSCalendar currentCalendar];
    NSRange daysInMonth = [currentCalendar rangeOfUnit:NSDayCalendarUnit 
                                                inUnit:NSMonthCalendarUnit
                                               forDate:selectedDate];
    unsigned unitFlags = NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit;
	NSDateComponents *dateComponents = [currentCalendar components:unitFlags fromDate:selectedDate];
    NSDateComponents *weekdayComponents = [[[NSDateComponents alloc] init] autorelease];
    weekdayComponents.day = 1;
    weekdayComponents.month = dateComponents.month;
    weekdayComponents.year = dateComponents.year;
    weekdayComponents = [currentCalendar components:(NSDayCalendarUnit | NSWeekdayCalendarUnit) fromDate:[currentCalendar dateFromComponents:weekdayComponents]];
    
    NSDate *previousDate = [self previousMonthDate];
    NSRange daysInPreviousMonth = [currentCalendar rangeOfUnit:NSDayCalendarUnit 
                                                         inUnit:NSMonthCalendarUnit
                                                        forDate:previousDate];
    
    int startTag = [weekdayComponents weekday] - 1;
    if (startTag == 0)
        startTag = 7;
    
    int iPrevious = daysInPreviousMonth.length - startTag + 2;
    int iNext = 1;
    for (int i = 0; i < 42; i++)
    {
        UIButton *button = (UIButton *)[self.view viewWithTag:i + 1];
        
        NSString *buttonTitle;
        if (i < startTag - 1)
        {
            buttonTitle = [NSString stringWithFormat:@"%d", iPrevious];
            button.enabled = NO;
            iPrevious++;
        }
        else if (i > daysInMonth.length + startTag - 2)
        {
            buttonTitle = [NSString stringWithFormat:@"%d", iNext];
            button.enabled = NO;
            iNext++;
        }
        else
        {
            NSDateComponents *currentDateComponents = [currentCalendar components:unitFlags fromDate:[NSDate date]];
            
            if (currentDateComponents.day  == i - startTag + 2 &&
                currentDateComponents.month == dateComponents.month &&
                currentDateComponents.year == dateComponents.year)
            {
                [button setBackgroundImage:[UIImage imageNamed:@"calendarItemBorder"] forState:UIControlStateNormal];
                [button setBackgroundImage:[UIImage imageNamed:@"calendarItemBorder"] forState:UIControlStateHighlighted];
                [button setBackgroundImage:[UIImage imageNamed:@"calendarItemBorder"] forState:UIControlStateDisabled];
            }
            else
            {
                [button setBackgroundImage:nil forState:UIControlStateNormal];
                [button setBackgroundImage:nil forState:UIControlStateHighlighted];
                [button setBackgroundImage:nil forState:UIControlStateDisabled];
            }
            
            buttonTitle = [NSString stringWithFormat:@"%d", i - startTag + 2];
            button.enabled = YES;
        }
        
        [button setTitle:buttonTitle forState:UIControlStateNormal];
        [button setTitle:buttonTitle forState:UIControlStateHighlighted];
        [button setTitle:buttonTitle forState:UIControlStateDisabled];
    }
        
    NSString *monthString;
    int month = dateComponents.month;
    switch (month)
    {
        case 1:
            monthString = @"Январь";
            break;
            
        case 2:
            monthString = @"Февраль";
            break;
            
        case 3:
            monthString = @"Март";
            break;
            
        case 4:
            monthString = @"Апрель";
            break;
            
        case 5:
            monthString = @"Май";
            break;
            
        case 6:
            monthString = @"Июнь";
            break;
            
        case 7:
            monthString = @"Июль";
            break;
            
        case 8:
            monthString = @"Август";
            break;
            
        case 9:
            monthString = @"Сентябрь";
            break;
            
        case 10:
            monthString = @"Октябрь";
            break;
            
        case 11:
            monthString = @"Ноябрь";
            break;
            
        case 12:
            monthString = @"Декабрь";
            break;
            
        default:
            monthString = @"";
            break;
    }
    
    monthLabel.text = monthString;
}

- (NSDate *)previousMonthDate
{
    NSCalendar *currentCalendar = [NSCalendar currentCalendar];
    unsigned unitFlags = NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit;
    NSDateComponents *dateComponents = [currentCalendar components:unitFlags fromDate:selectedDate];
    NSDateComponents *previousDateComponents = [[[NSDateComponents alloc] init] autorelease];
    previousDateComponents.day = 1;
    if (dateComponents.month - 1 < 1)
    {
        previousDateComponents.month = 12;
        previousDateComponents.year = dateComponents.year - 1;
    }
    else
    {
        previousDateComponents.month = dateComponents.month - 1;
        previousDateComponents.year = dateComponents.year;
    }
    return [currentCalendar dateFromComponents:previousDateComponents];
}

- (NSDate *)nextMonthDate
{
    NSCalendar *currentCalendar = [NSCalendar currentCalendar];
    unsigned unitFlags = NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit;
    NSDateComponents *dateComponents = [currentCalendar components:unitFlags fromDate:selectedDate];
    NSDateComponents *previousDateComponents = [[[NSDateComponents alloc] init] autorelease];
    previousDateComponents.day = 1;
    if (dateComponents.month + 1 > 12)
    {
        previousDateComponents.month = 1;
        previousDateComponents.year = dateComponents.year + 1;
    }
    else
    {
        previousDateComponents.month = dateComponents.month + 1;
        previousDateComponents.year = dateComponents.year;
    }
    return [currentCalendar dateFromComponents:previousDateComponents];
}

@end
